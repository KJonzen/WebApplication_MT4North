// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication_MT4North.Models;

namespace WebApplication_MT4North.Migrations
{
    [DbContext(typeof(MT4NorthContext))]
    partial class MT4NorthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:Collation", "Finnish_Swedish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("activity_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseInfoId")
                        .HasColumnName("base_info_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnName("deadline_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("finish_date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsExcluded")
                        .HasColumnName("is_excluded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasColumnName("phase")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Resources")
                        .HasColumnName("resources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('Ej påbörjad')")
                        .HasMaxLength(50);

                    b.Property<int?>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ThemeId");

                    b.ToTable("activity");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.BaseActivityInfo", b =>
                {
                    b.Property<int>("BaseInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("base_info_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasColumnName("phase")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasColumnType("int");

                    b.HasKey("BaseInfoId");

                    b.HasIndex("ThemeId");

                    b.ToTable("base_activity_info");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.CustomActivityInfo", b =>
                {
                    b.Property<int>("CustomInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custom_info_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnName("activity_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasColumnName("phase")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ThemeId")
                        .HasColumnName("theme_id")
                        .HasColumnType("int");

                    b.HasKey("CustomInfoId")
                        .HasName("PK_custom_activity");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ThemeId");

                    b.ToTable("custom_activity_info");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.InnovationModel", b =>
                {
                    b.Property<int>("InnovationModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("innovation_model_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.HasKey("InnovationModelId");

                    b.HasIndex("ProjectId");

                    b.ToTable("innovation_model");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("note_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId")
                        .HasColumnName("activity_id")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("time_stamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("note");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("project_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProjectId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.RegisteredUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasColumnName("email_adress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnName("sex")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasName("PK_registered_user_1");

                    b.ToTable("registered_user");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.RegisteredUserProject", b =>
                {
                    b.Property<int>("RegisteredUserProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("registered_user_project_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnName("registered_user_id")
                        .HasColumnType("int");

                    b.Property<string>("Rights")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rights")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('Read and write')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RegisteredUserProjectId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("registered_user_project");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("theme_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InnovationModelId")
                        .HasColumnName("innovation_model__id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ThemeId");

                    b.HasIndex("InnovationModelId");

                    b.ToTable("theme");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Activity", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.BaseActivityInfo", "BaseInfo")
                        .WithMany("Activities")
                        .HasForeignKey("BaseInfoId")
                        .HasConstraintName("FK_activity_base_activity_info");

                    b.HasOne("WebApplication_MT4North.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_activity_project")
                        .IsRequired();

                    b.HasOne("WebApplication_MT4North.Models.Theme", "Theme")
                        .WithMany("Activities")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_activity_theme");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.BaseActivityInfo", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.Theme", "Theme")
                        .WithMany("BaseActivityInfos")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_base_activity_info_theme");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.CustomActivityInfo", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.Activity", "Activity")
                        .WithMany("CustomActivityInfos")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_custom_activity_info_activity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_MT4North.Models.Theme", "Theme")
                        .WithMany("CustomActivityInfos")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_custom_activity_info_theme");
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.InnovationModel", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.Project", "Project")
                        .WithMany("InnovationModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_innovation_model_project")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Note", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.Activity", "Activity")
                        .WithMany("Notes")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_note_activity")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany("Notes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("WebApplication_MT4North.Models.RegisteredUser", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_note_registered_user")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.RegisteredUserProject", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.ApplicationUser", null)
                        .WithMany("RegisteredUserProjects")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("WebApplication_MT4North.Models.Project", "Project")
                        .WithMany("RegisteredUserProjects")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_project_member_project")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_MT4North.Models.RegisteredUser", "RegisteredUser")
                        .WithMany("RegisteredUserProjects")
                        .HasForeignKey("RegisteredUserId")
                        .HasConstraintName("FK_project_member_registered_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication_MT4North.Models.Theme", b =>
                {
                    b.HasOne("WebApplication_MT4North.Models.InnovationModel", "InnovationModel")
                        .WithMany("Themes")
                        .HasForeignKey("InnovationModelId")
                        .HasConstraintName("FK_theme_innovation_model");
                });
#pragma warning restore 612, 618
        }
    }
}
